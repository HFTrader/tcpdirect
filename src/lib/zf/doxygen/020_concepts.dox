/* SPDX-License-Identifier: MIT */

/****************************************************************************
 * Copyright 2004-2005: Level 5 Networks Inc.
 * Copyright 2005-2019: Solarflare Communications Inc.
 * Copyright 2019-2022: Xilinx Inc, 2100 Logic Drive, San Jose, CA 95124, USA.
 ****************************************************************************
 */

/**************************************************************************\
*//*! \file
** \author    Advanced Micro Devices, Inc.
** \brief     Additional Doxygen-format documentation for TCPDirect.
** \date      2020/03/10
** \copyright &copy;  Copyright 2020 Xilinx, Inc. Xilinx, the Xilinx logo,
**            Solarflare, Onload, TCPDirect, and other designated brands
**            included herein are trademarks of Xilinx in the United States
**            and other countries. All other trademarks are the property of
**            their respective owners.
*//*
\**************************************************************************/

/**************************************************************************
 * Concepts page
 *************************************************************************/
 /*! \page concepts Concepts

This part of the documentation describes the concepts involved in TCPDirect.

\section concepts_stacks Stacks

TCPDirect can have multiple network stacks. Each stack accesses a separate
partition of the network adaptor, which improves security. Access to a given
stack is not thread-safe, so typically each thread uses a separate TCPDirect
stack. This model avoids problems of lock-contention and cache-line bouncing
and allows for scalability in a natural way.

\section concepts_zockets Zockets

TCPDirect endpoints are represented by _zockets_. Zockets are similar to BSD or
POSIX sockets, but are categorized by protocol and state into different zocket
types.

Each type of zocket is represented by its own distinct data structure, and is
handled by its own API calls. Because the type of zocket is known, code can
be more efficient.

Zockets cannot be converted from one type to another.

\subsection concepts_tcp_zockets TCP zockets

For TCP, a new zocket can be listening or non-listening:
- a listening zocket is represented by a _TCP listening zocket_ data
  structure
- a non-listening zocket is represented by a _TCP zocket handle_.

If the zocket is later connected, a _TCP zocket_ data structure is created
and returned. This occurs if:
- a connection to a TCP listening zocket is accepted
- a TCP zocket handle is connected.

\subsection concepts_udp_zockets UDP zockets

For UDP, a zocket can be used to receive or transmit:
- a receive zocket is represented by a _UDP receive zocket_ data structure
- a transmit zocket is represented by a _UDP transmit zocket_ data structure

\subsection concepts_waitables Waitables

_Waitables_ are handles that represent zockets and are used with the
\ref concepts_multiplexer "multiplexer" interface.

Each type of zocket has an API call to return a waitable representing the
zocket.


\section concepts_multiplexer Multiplexers

A _multiplexer_ (or _muxer_) allows multiple zockets to be polled for
activity through a single call.  The interface and behaviour are similar to
the standard Linux epoll mechanism.

Each multiplexer is associated with a \ref concepts_stacks "stack" and can
only be used to poll zockets from that stack.  Zockets (represented by \ref
concepts_waitables "waitables") can be added to a multiplexer together with
the set of events that the application is interested in.  A zocket can only
be a member of one multiplexer at a time.

When a multiplexer is polled the corresponding stack is polled for network
events, and a list of zockets that are _ready_ (readable, writable etc.) is
returned.


\section concepts_tx_alternatives TX alternatives

_TX alternatives_ provide multiple alternative queues for transmission, that
can be used to minimize latency. Different possible responses can be pushed
through the TX path on the NIC, and held in different queues ready to
transmit. When it is decided which response to transmit, the appropriate
alternative queue is selected, and the queued packets are sent. Because the
packets are already prepared, and are held close to the wire, latency is
greatly reduced.

Due to differences in hardware architecture, the TX alternatives feature is
not available on SFN7000-series adapters.  It is also not supported on stacks
running on bonded interfaces.

\section concepts_ctpio Cut-through PIO

CTPIO (Cut-through PIO) improves send latency by moving packets from the PCIe
bus to network port with minimal latency.  It can be used in three modes:
-# Cut-through: The frame is transmitted onto the network as it is streamed
   across the PCIe bus.  This mode offers the best latency.
-# Store-and-forward: The frame is buffered on the adapter before
   transmitting onto the network.
-# Store-and-forward with poison disabled: As for (2), except that it is
   guaranteed that frames are never poisoned.  When this mode is enabled on
   any VI, all VIs are placed into store-and-forward mode.

Due to differences in hardware architecture, CTPIO is not available on
SFN8000-series or SFN7000-series adapters.

\section concepts_delegated_send Delegated sends

Delegated sends allow the user to have TCPDirect handle the TCP state machine
while performing critical sends through another mechanism (such as %ef_vi) to
achieve lower latency.  This is analogous both in principle and in the
arrangement of the API to the delegated sends feature of Onload.

*/
